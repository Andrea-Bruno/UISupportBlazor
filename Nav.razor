@using UISupportGeneric.UI
@using Microsoft.AspNetCore.Http
@inject NavigationManager MyNavigationManager
@inject IServiceProvider ServiceProvider

@{
    if (Id == null)
    {
        return;
    }
    ClassInfo? ClassInfo = null;
    try
    {
        var id = new Guid(Id);
        // Check if HttpContextAccessor is available and HttpContext is not null
        if (HttpContextAccessor?.HttpContext != null)
        {
            // Get the session object
            var session = UISupportBlazor.Session.Sessions.GetSession(HttpContextAccessor.HttpContext);

            // Get the ClassInfo by ID
            if (session != null)
                ClassInfo = session.GetClassInfoById(id);
            if (ClassInfo == null)
            {
                // If ClassInfo is not found in the session, return
                return;
            }
            // Check if ClassInfo is in the "AllowedPanels" list saved in the session
            if (session != null && session.Values.TryGetValue("AllowedPanels", out var allowedPanelsObj) && allowedPanelsObj is List<ClassInfo> allowedPanels)
            {
                if (!allowedPanels.Contains(ClassInfo))
                {
                    return;
                }
            }
            else
            {
                // If "AllowedPanels" is not found or is not of the correct type, return
                return;
            }
        }
        else if (ClassInfo == null)
        {
            Menu.IdTable.TryGetValue(id, out ClassInfo);
        }
    }
    catch (Exception)
    {
        // Handle exceptions (optional: add logging here)
    }
    if (ClassInfo != null)
    {
        <ObjectEditor Info="@ClassInfo" InterfaceType="@InterfaceType.AutoSave" RefreshContainer="@Refresh"></ObjectEditor>
    }
}



@code {
    private void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private IHttpContextAccessor? HttpContextAccessor;

    [Parameter]
    public string? Id { get; set; }

    protected override void OnInitialized()
    {
        // Try to get the IHttpContextAccessor service
        HttpContextAccessor = (IHttpContextAccessor?)ServiceProvider.GetService(typeof(IHttpContextAccessor));
    }
}
