@using static UISupportGeneric.Util
@using UISupportGeneric.UI
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Http

<nav class="nav flex-column">
    @if (ClassInfoEnumerable != null)
    {
        foreach (var classInfo in ClassInfoEnumerable)
        {
            classInfo.OnChange = Refresh;
            if (classInfo.Hidden != true)
            {
                var expandSubNav = ClassInfoEnumerable.Where(x => x.MemberOfId == classInfo.Id).ToArray();
                var pageId = "nav/" + classInfo.Id;

                lock (IdTable)
                {
                    @if (!IdTable.ContainsKey(classInfo.Id))
                    {
                        IdTable.Add(classInfo.Id, classInfo);
                    }
                }
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@pageId">
                        <span style="padding: 0rem 1rem 0rem 0rem" aria-hidden="true">
                            @((MarkupString)UISupportGeneric.Util.GetIcon(classInfo.Icon, "width: 1.25em; height: 1.25em; vertical-align: -0.125em; fill: currentColor; display: inline-block;"))
                        </span> @classInfo.Label
                    </NavLink>
                </div>
            }
        }

        // Save ClassInfoEnumerable in the session
        SaveClassInfoEnumerableToSession();
    }
</nav>

@code {
    /// <summary>
    /// Sets of classes with the main functions to be rendered in the UI
    /// </summary>
    [Parameter]
    public IEnumerable<ClassInfo>? ClassInfoEnumerable { get; set; }

    /// <summary>
    /// If Classes Info is not set we can indicate the Namespace where all the classes reside, as long as we are working on the current assembly
    /// </summary>
    [Parameter]
    public string? RootUINamespace
    {
        set
        {
            ClassInfoEnumerable = UISupportGeneric.Util.GetAllClassInfoInNamespace(value, null);
        }
    }

    internal static readonly Dictionary<Guid, ClassInfo> IdTable = new();

    public void Dispose()
    {
        foreach (var classInfo in ClassInfoEnumerable)
            classInfo.UnsubscribeOnChange(Refresh);
    }

    public void Refresh()
    {
        foreach (var classInfo in ClassInfoEnumerable)
            classInfo.UnsubscribeOnChange(Refresh);
        InvokeAsync(StateHasChanged);
    }

    private void SaveClassInfoEnumerableToSession()
    {
        // Get the current HttpContext
        var httpContext = HttpContextAccessor?.HttpContext;
        if (httpContext != null && ClassInfoEnumerable != null)
        {
            var session = UISupportBlazor.Session.Sessions.GetSession(httpContext);
            session.Values["AllowedPanels"] = ClassInfoEnumerable.ToList();                        
        }
    }

    private IHttpContextAccessor? HttpContextAccessor { get; set; }

    [Inject]
    private IServiceProvider? ServiceProvider { get; set; }

    protected override void OnInitialized()
    {
        HttpContextAccessor = (IHttpContextAccessor?)ServiceProvider?.GetService(typeof(IHttpContextAccessor));
    }
}